// ðŸ“¦ Imports nÃ©cessaires
import 'dart:io'; // Pour manipuler des fichiers locaux (images)

import 'package:favorite_places/models/place.dart'; // ModÃ¨le de donnÃ©es Place
import 'package:favorite_places/widgets/image_input.dart'; // Widget pour prendre une photo
import 'package:favorite_places/widgets/location_input.dart'; // Widget pour rÃ©cupÃ©rer la localisation
import 'package:flutter/material.dart'; // Package de base Flutter
import 'package:flutter_riverpod/flutter_riverpod.dart'; // Riverpod pour la gestion dâ€™Ã©tat

import 'package:favorite_places/providers/user_places.dart'; // Provider des lieux favoris

// ðŸ“Œ Widget de l'Ã©cran d'ajout de lieu qui utilise Riverpod pour accÃ©der aux providers
class AddPlaceScreen extends ConsumerStatefulWidget {
  const AddPlaceScreen({super.key});

  @override
  ConsumerState<AddPlaceScreen> createState() {
    return _AddPlaceScreen(); // CrÃ©e lâ€™Ã©tat associÃ©
  }
}

// ðŸ“Œ Classe dâ€™Ã©tat de AddPlaceScreen
class _AddPlaceScreen extends ConsumerState<AddPlaceScreen> {
  // ContrÃ´leur pour rÃ©cupÃ©rer le texte saisi dans le champ de texte
  final _titleController = TextEditingController();

  // Variables pour stocker lâ€™image et la localisation choisies par lâ€™utilisateur
  File? _selectedImage;
  PlaceLocation? _selectedLocation;

  // ðŸ“Œ Fonction pour sauvegarder un lieu
  void _savePlace() {
    final enteredText = _titleController.text;

    // VÃ©rifie si tout est bien rempli avant dâ€™enregistrer
    if (enteredText.isEmpty || _selectedImage == null || _selectedLocation == null) {
      return;
    }

    // Ajoute le lieu via le provider en passant le titre, l'image et la localisation
    ref.read(userPlacesProvider.notifier).addPlace(
          enteredText,
          _selectedImage!,
          _selectedLocation!,
        );

    // Revient Ã  l'Ã©cran prÃ©cÃ©dent aprÃ¨s l'ajout
    Navigator.of(context).pop();
  }

  // ðŸ“Œ LibÃ¨re le contrÃ´leur mÃ©moire quand lâ€™Ã©cran est dÃ©truit
  @override
  void dispose() {
    _titleController.dispose();
    super.dispose();
  }

  // ðŸ“Œ MÃ©thode build : construit lâ€™interface utilisateur
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Add new Place')), // Titre de lâ€™appbar

      // Corps de la page avec du contenu scrollable (pour Ã©viter les dÃ©bordements clavier)
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(12), // Marge autour du contenu
        child: Column(
          children: [
            // ðŸ“Œ Champ de texte pour saisir le titre du lieu
            TextField(
              decoration: InputDecoration(labelText: 'Title'),
              controller: _titleController, // Associe le contrÃ´leur
              style: TextStyle(color: Theme.of(context).colorScheme.onSurface),
            ),

            const SizedBox(height: 10), // Espacement vertical

            // ðŸ“Œ Widget pour prendre une image
            ImageInput(
              onPickImage: (image) {
                _selectedImage = image; // Stocke l'image choisie
              },
            ),

            const SizedBox(height: 10),

            // ðŸ“Œ Widget pour choisir une localisation
            LocationInput(
              onSelectLocation: (location) {
                _selectedLocation = location; // Stocke la localisation choisie
              },
            ),

            const SizedBox(height: 16),

            // ðŸ“Œ Bouton pour sauvegarder le lieu
            ElevatedButton.icon(
              onPressed: _savePlace, // Quand on clique â†’ appelle _savePlace
              icon: const Icon(Icons.add), // IcÃ´ne +
              label: Text('Add Place'),
            ),
          ],
        ),
      ),
    );
  }
}
